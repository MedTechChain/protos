syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "common/common.proto";

package query;

option java_package = "nl.medtechchain.proto.query";

message Filter {
  message StringFilter {
    enum StringOperator {
      STRING_OPERATOR_UNSPECIFIED = 0;
      STRING_OPERATOR_EQUALS = 1;
      STRING_OPERATOR_CONTAINS = 2;
      STRING_OPERATOR_STARTS_WITH = 3;
      STRING_OPERATOR_ENDS_WITH = 4;
    }

    string field = 1;
    string value = 2;
    StringOperator operator = 3;
  }

  message IntFilter {
    enum IntOperator {
      INT_OPERATOR_UNSPECIFIED = 0;
      INT_OPERATOR_EQUALS = 1;
      INT_OPERATOR_GREATER_THAN = 2;
      INT_OPERATOR_LESS_THAN = 3;
      INT_OPERATOR_GREATER_THAN_OR_EQUAL = 4;
      INT_OPERATOR_LESS_THAN_OR_EQUAL = 5;
    }

    string field = 1;
    int32 value = 2;
    IntOperator operator = 3;
  }

  message TimestampFilter {
    enum TimestampOperator {
      TIMESTAMP_OPERATOR_UNSPECIFIED = 0;
      TIMESTAMP_OPERATOR_EQUALS = 1;
      TIMESTAMP_OPERATOR_BEFORE = 2;
      TIMESTAMP_OPERATOR_AFTER = 3;
    }

    string field = 1;
    google.protobuf.Timestamp value = 2;
    TimestampOperator operator = 3;
  }

  message BoolFilter {
    enum BoolOperator {
      BOOL_OPERATOR_UNSPECIFIED = 0;
      BOOL_OPERATOR_EQUALS = 1;
    }

    string field = 1;
    bool value = 2;
    BoolOperator operator = 3;
  }

  oneof filter_type {
    StringFilter string_filter = 1;
    IntFilter int_filter = 2;
    TimestampFilter timestamp_filter = 3;
    BoolFilter bool_filter = 4;
  }
}

message Query {
  enum QueryType {
    QUERY_TYPE_UNSPECIFIED = 0;
    QUERY_TYPE_COUNT = 1;
    QUERY_TYPE_GROUPED_COUNT = 2;
    QUERY_TYPE_AVERAGE = 3;
  }

  string submitter = 1;
  QueryType query_type = 2;
  string field = 3;
  repeated Filter filters = 4;
}

message QueryResult {
  message GroupedCount {
    map<string, int32> map = 1;
  }

  oneof result_type {
    int32 count_result = 1;
    GroupedCount grouped_count_result = 2;
    double average_result = 3;
    common.ChaincodeError error = 4;
  }
}

message QueryAsset {
  Query query = 1;
  QueryResult result = 2;
}