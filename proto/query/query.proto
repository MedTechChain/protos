syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "common/common.proto";

package query;

option java_package = "nl.medtechchain.proto.query";

message Filter {
  message StringFilter {
    enum StringOperator {
      STRING_OPERATOR_UNSPECIFIED = 0;
      EQUALS = 1;
      CONTAINS = 2;
      STARTS_WITH = 3;
      ENDS_WITH = 4;
    }

    string value = 1;
    StringOperator operator = 2;
  }

  message IntegerFilter {
    enum IntOperator {
      INT_OPERATOR_UNSPECIFIED = 0;
      EQUALS = 1;
      GREATER_THAN = 2;
      LESS_THAN = 3;
      GREATER_THAN_OR_EQUAL = 4;
      LESS_THAN_OR_EQUAL = 5;
    }

    int64 value = 1;
    IntOperator operator = 2;
  }

  message TimestampFilter {
    enum TimestampOperator {
      TIMESTAMP_OPERATOR_UNSPECIFIED = 0;
      EQUALS = 1;
      BEFORE = 2;
      AFTER = 3;
    }

    google.protobuf.Timestamp value = 1;
    TimestampOperator operator = 2;
  }

  message BoolFilter {
    enum BoolOperator {
      BOOL_OPERATOR_UNSPECIFIED = 0;
      EQUALS = 1;
    }

    bool value = 1;
    BoolOperator operator = 2;
  }

  message EnumFilter {
    string value = 1;
  }

  string field = 1;
  oneof comparator {
    StringFilter string_filter = 2;
    IntegerFilter integer_filter = 3;
    TimestampFilter timestamp_filter = 4;
    BoolFilter bool_filter = 5;
    EnumFilter enum_filter = 6;
  }
}

message Query {
  enum QueryType {
    QUERY_TYPE_UNSPECIFIED = 0;
    COUNT = 1;
    GROUPED_COUNT = 2;
    AVERAGE = 3;
  }

  string submitter = 1;
  QueryType query_type = 2;
  string target_field = 3;
  repeated Filter filters = 4;
}

message QueryResult {
  message GroupedCount {
    map<string, int64> map = 1;
  }

  oneof result_type {
    int64 count_result = 1;
    GroupedCount grouped_count_result = 2;
    double average_result = 3;
    common.ChaincodeError error = 4;
  }
}

message QueryAsset {
  Query query = 1;
  QueryResult result = 2;
  google.protobuf.Timestamp request_time = 3;
  google.protobuf.Timestamp response_time = 4;
}

message ReadQueryAssetPage {
  int32 page_number = 1;
  int32 page_size = 2;
}


message QueryAssetPage {
  int32 page_number = 1;
  int32 page_size = 2;
  repeated QueryAsset assets = 3;
}